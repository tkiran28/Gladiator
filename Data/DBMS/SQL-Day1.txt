 https://localhost:1158/em

-> 'T' Shaped Developer
-> Java Full Stack Developer (Angular + Java)
-> MEAN/MEARN Stack Developer (Mongo/Express/Angular/React/Node)

Oracle Database
-> SQL & PL/SQL
-> Normalization


refer geeks for geeks for to_char function
Persistent Data
-> Database
   -> SQL (Relational -> Tables) 
	--> Oracle, Sybase, DB2, Sql Server, MySQL, ....
   -> NO-SQL (Relational -> Document/Graph) 
	--> MongoDB, Neo4J, Cassandra, ...

Persistent Data
-> Database
-> Files
-> Cloud

In Memory Databases 
-> Data stored temporarily in memory as long as application is running
-> Derby, HSQL, Sqllite, ...
   -> We can use Derby and others as persistent database as well


What is a Database?
-> Collection of files where data is stored finally
   -> For ex. in case of Oracle .dbf files

What is a Database Management System?
-> Oracle 11g (Database Instance) & Oracle JDeveloper/SQLPlus (UI)
-> MySQL Server (Database Instance) & MySQL Workbench (UI)
-> Sql Server (Database Instance) & Management Studio (UI)

TODO: Difference between DBMS & RDBMS

SQL (Structured Query Language)
-> Language understood by Relational Databases

-> DQL	[Query]			--> Select
-> DML	[Manipulation]		--> Insert/Update/Delete/Merge
-> DDL	[Definition]		--> Create, Alter, Drop, Truncate, Rename
-> DCL	[Control]		--> Grant, Revoke
-> TCL	[Transaction Control]	--> Commit, Rollback, Savepoint

TODO:
-> Installing Oracle 11g (Setup Guide will be shared soon..)
-> After Installation of Oracle, we need to unlock the HR schema

DQL
-> Retrieval/Fetch of Data
-> Writing efficient queries is critical for the performance of any application

Role of Select Queries
-> Projection
   -> selection of columns
-> Selection
   -> selection of rows
-> Joining
   -> linking multiple tables

Basic Syntax of SELECT query ->
SELECT
FROM
WHERE
....

Q.1 -> Fetching all the employees from the employees table
SELECT * FROM hr.employees;

Q.2 -> Fetching only the first_name and last_name of all the employees
SELECT first_name, last_name FROM hr.employees;

Q.3 -> Fetch name, salary and annual salary of all the employees
SELECT first_name, salary, salary * 12 FROM hr.employees;

Q.4 -> Using Aliases in the above query
SELECT first_name, salary as monthly_salary, salary * 12 as annual_salary FROM hr.employees;

Q.5 -> Concatenation using || symbol
SELECT first_name || last_name AS full_name, salary FROM hr.employees;
SELECT first_name || ' ' || last_name AS full_name, salary FROM hr.employees;
SELECT employee_id, 'My name is ' || first_name || ' ' || last_name AS emp_name FROM hr.employees;

Q.6 -> Understanding NULL values
SELECT employee_id, salary, commission_pct FROM hr.employees;

Q.7 -> What happens if we try salary * commision_pct where commission_pct is null in some cases?
SELECT employee_id, salary, salary * commission_pct AS total_commission FROM hr.employees;

Q.8 -> Fetch all the employees working in department_id 10
SELECT employee_id, last_name, salary FROM hr.employees WHERE department_id = 10;

Q.8 -> Fetch all the employees working in department_id 10 as well as 20
SELECT employee_id, last_name, salary FROM hr.employees WHERE department_id = 10 OR department_id = 20;
SELECT employee_id, last_name, salary FROM hr.employees WHERE department_id IN (10,20);

or and in are same 


Q.9 -> Fetch all the employees who are eligible for a commission
SELECT employee_id, last_name, salary FROM hr.employees WHERE commission_pct IS NOT NULL;
SELECT employee_id, last_name, salary FROM hr.employees WHERE commission_pct > 0;

Q.10 -> Fetch all the employees who are sales representatives (sa_rep)
* SELECT employee_id, last_name FROM hr.employees WHERE job_id = 'SA_REP';
--Below query will not work since data is always case-sensitive
* SELECT employee_id, last_name FROM hr.employees WHERE job_id = 'sa_rep';
--What if we don't know the case in which the data is stored?
Then we might convert the data in lower/upper case and then compare it
* SELECT employee_id, last_name FROM hr.employees WHERE LOWER(job_id) = 'sa_rep';

Q.11 -> Fetch all the employees who are sales representatives and their salaries greater than 10000
* SELECT employee_id, last_name FROM hr.employees WHERE job_id = 'SA_REP' AND salary > 10000;

Q.12 -> Fetch all the employees who are sales representatives or salaries greater than 10000
* SELECT employee_id, last_name, salary, job_id FROM hr.employees WHERE job_id = 'SA_REP' OR salary > 10000;

Now we will try out IN, BETWEEN, LIKE(% AND _)

Q.13 -> Fetch all the employees working in department_id 10, 20 and 30
* SELECT employee_id, last_name, salary, job_id FROM hr.employees WHERE department_id = 10 OR department_id = 20 OR department_id = 30;
* SELECT employee_id, last_name, salary, job_id FROM hr.employees WHERE department_id IN (10, 20, 30);

Q.14 -> Fetch all the employees whose salary is in the range of 10000 to 20000
* SELECT employee_id, last_name, salary, job_id FROM hr.employees WHERE salary >= 10000 AND salary <= 20000;
* SELECT employee_id, last_name, salary, job_id FROM hr.employees WHERE salary BETWEEN 10000 AND 20000;

Q.15 -> Fetch all the employees whos first_name starts with A
* SELECT employee_id, last_name, salary, job_id FROM hr.employees WHERE first_name LIKE 'A%';

Q.16 -> Fetch all the employees whose job id is some representative
* SELECT employee_id, first_name, salary, job_id, email FROM hr.employees WHERE job_id LIKE '%REP';

Q.17 -> Fetch all the employees where the second last character in the last_name is 'a'
* SELECT employee_id, first_name, salary, job_id, email FROM hr.employees WHERE UPPER(last_name) LIKE '%A_';

Q.18 -> Fetch all the employees where the third character in the first_name is 'a'
* SELECT employee_id, first_name, salary, job_id, email FROM hr.employees WHERE UPPER(first_name) LIKE '__A%';

Q.19 -> Fetch all the employees who were hired in the month of August
* SELECT employee_id, first_name, salary, job_id, hire_date FROM hr.employees WHERE hire_date LIKE '%AUG%';

Q.20 -> Fetch all the employees who were hired in the year 2005
* SELECT employee_id, first_name, salary, job_id, hire_date FROM hr.employees WHERE hire_date BETWEEN '01-JAN-2005' AND '31-DEC-2005';












Shopping
-> Schema
   -> Product
      -> Product Table
      -> Stock Table
      -> Category Table
      -> Payment Table
   -> Retailer/Seller
      -> Seller Table
      -> Business Details Table
      -> Payment Table


TODO:  Examples on Subquery
SELECT  MAX(salary) FROM hr.employees WHERE Salary <> ( SELECT Max(Salary) from hr.employees);
SELECT * FROM hr.employees WHERE salary=( SELECT MAX(salary) FROM hr.employees WHERE salary < (SELECT MAX(salary) FROM hr.employees)); 
select max(salary) from hr.employees where salary < (select max(salary) from hr.employees) order by salary desc;
Select MAX(salary) from hr.employees where salary not in (Select MAX(salary) from hr.employees);


